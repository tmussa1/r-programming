print()
# Correlation matrix for data frame
df %>% cor()
# Fewer decimal places
df %>%
cor() %>%     # Compute correlations
round(2) %>%  # Round to 2 decimals
print()
# Visualize correlation matrix with corrplot() from
# corrplot package
df %>%
cor() %>%
corrplot(
type   = "upper",     # Matrix: full, upper, or lower
diag   = F,           # Remove diagonal
order  = "original",  # Order for labels
tl.col = "black",     # Font color
tl.srt = 45           # Label angle
)
df %$% cor.test(instagram, privacy)
# Install pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(magrittr, pacman, rio, tidyverse)
# Save categorical variables and shorten factor labels
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code, region, psychRegions) %>%
mutate(
psychRegions = as.factor(psychRegions),
psychRegions = fct_recode(psychRegions,
"Friendly" = "Friendly and Conventional",
"Relaxed" = "Relaxed and Creative",
"Temperamental" = "Temperamental and Uninhibited"
)
) %>%
print()
# Create contingency table "ct"
ct <- df %>%
select(region, psychRegions) %>%
table() %>%
print()
# Row frequencies
ct %>% rowSums()
# Row percentages
ct %>%
prop.table(1) %>%  # 1 is for row percentages
round(2) %>%       # Round to two decimal places
`*`(100)           # Multiply by 100 to read as percent
# Column frequencies
ct %>% colSums()
# Column percentages
ct %>%
prop.table(2) %>%  # 2 is for columns percentages
round(2) %>%
`*`(100)
# Total percentages
ct %>%
prop.table() %>%  # No argument for total percentages
round(2) %>%
`*`(100)
# Chi-squared test (but n is small)
chi <- ct %>%
chisq.test() %>%
print()
# Additional tables
chi$observed   # Observed frequencies (same as ct)
chi$expected   # Expected frequencies
chi$residuals  # Pearson's residual
chi$stdres     # Standardized residual
shiny::runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/assignment-11/part-03')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/assignment-10/part-01')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/assignment-10/part-02')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/assignment-10/part-02')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/assignment-10/part-02')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
profileDf <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(instagram:modernDance) %>%
print()
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp()
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp()
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
profileDf <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(instagram:modernDance) %>%
print()
profileDf
runApp()
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project')
setwd("C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(instagram:modernDance) %>%
print()
df
setwd("C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project")
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(instagram:modernDance) %>%
print()
df
head(df)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(instagram:modernDance) %>%
print()
head(df)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(instagram:modernDance) %>%
print()
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
print()
df[, 11:22]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
profileDf
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
profileDfContingent <- profileDf[, c(2, 3, 5)]
profileDf <- import("data/StateData.xlsx") %>%
as_tibble()
profileDfContingent <- profileDf[, c(2, 3, 5)]
profileDfContingent %>%
mutate(
psychRegions = as.factor(psychRegions),
psychRegions = fct_recode(psychRegions,
"Friendly" = "Friendly and Conventional",
"Relaxed" = "Relaxed and Creative",
"Temperamental" = "Temperamental and Uninhibited"
)
) %>%
print()
profileDfContingent <- profileDfContingent %>%
select(region, psychRegions) %>%
table() %>%
print()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Install pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(magrittr, pacman, rio, tidyverse)
# Save categorical variables and shorten factor labels
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code, region, psychRegions) %>%
mutate(
psychRegions = as.factor(psychRegions),
psychRegions = fct_recode(psychRegions,
"Friendly" = "Friendly and Conventional",
"Relaxed" = "Relaxed and Creative",
"Temperamental" = "Temperamental and Uninhibited"
)
) %>%
print()
# Create contingency table "ct"
ct <- df %>%
select(region, psychRegions) %>%
table() %>%
print()
# Save categorical variables and shorten factor labels
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
dplyr::select(state_code, region, psychRegions) %>%
mutate(
psychRegions = as.factor(psychRegions),
psychRegions = fct_recode(psychRegions,
"Friendly" = "Friendly and Conventional",
"Relaxed" = "Relaxed and Creative",
"Temperamental" = "Temperamental and Uninhibited"
)
) %>%
print()
# Create contingency table "ct"
ct <- df %>%
dplyr::select(region, psychRegions) %>%
table() %>%
print()
profileDf <- import("data/StateData.xlsx") %>%
as_tibble()
profileDfContingent <- profileDf[, c(2, 3, 5)]
profileDfContingent
profileDfContingent <- profileDfContingent %>%
mutate(
psychRegions = as.factor(psychRegions),
psychRegions = fct_recode(psychRegions,
"Friendly" = "Friendly and Conventional",
"Relaxed" = "Relaxed and Creative",
"Temperamental" = "Temperamental and Uninhibited"
)
)
profileDfContingent
profileDfContingent <- profileDfContingent %>%
dplyr::select(region, psychRegions) %>%
table() %>% prop.table(1) %>%
round(2) %>%
`*`(100)
profileDfContingent
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Install pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(GGally, magrittr, pacman, rio, tidyverse)
# Save Google Correlate variables
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(instagram:modernDance) %>%
print()
# Save Google Correlate variables
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
dplyr::select(instagram:modernDance) %>%
print()
# Save Google Correlate variables
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
dplyr::select(instagram:modernDance) %>%
print()
# Scatterplot matrix of all variables (takes a moment)
df %>% ggpairs()
# Scatterplot of museum and volunteering
df %>%
ggplot(aes(museum, volunteering)) +
geom_point(size = 3) +
geom_smooth(method = lm)
# Compute and save bivariate regression
fit1 <- df %>%                      # Save as "fit1"
select(volunteering, museum) %>%  # y, then x
lm()                              # Linear model
# Show model
fit1
# Compute and save bivariate regression
fit1 <- df %>%                      # Save as "fit1"
select(volunteering, museum) %>%  # y, then x
lm()                              # Linear model
# Compute and save bivariate regression
fit1 <- df %>%                      # Save as "fit1"
dplyr::select(volunteering, museum) %>%  # y, then x
lm()                              # Linear model
# Show model
fit1
# Summarize regression model
fit1 %>% summary()
# Confidence intervals for coefficients
fit1 %>% confint()
# Predict values of "volunteering"
fit1 %>% predict()
# Regression diagnostics
fit1 %>% lm.influence()
fit1 %>% influence.measures()
# Diagnostic plots; run command then hit return in Console
# 1: Residuals vs. Fitted
# 2: Normal Q-Q
# 3: Scale-Location
# 4: Residuals vs. Leverage
fit1 %>% plot()
volunteering,  # Outcome variable selected first
everything()   # Selects all other variables in df
) %>%
print()
# Most concise; uses first variable as outcome
df %>% lm()  # Or just lm(df)
# Identify outcome, infer rest; must specify dataset
lm(volunteering ~ ., data = df)
# Identify entire model
lm(volunteering ~ instagram + facebook + retweet +
entrepreneur + gdpr + privacy + university +
mortgage + museum + scrapbook + modernDance,
data = df)
# Save model
fit2 <- df %>% lm()
# Show model
fit2
runApp()
runApp()
# Create contingency table "ct"
ct <- df %>%
dplyr::select(region, psychRegions) %>%
table() %>%
print()
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(magrittr, pacman, rio, tidyverse)
# Save categorical variables and shorten factor labels
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
dplyr::select(state_code, region, psychRegions) %>%
mutate(
psychRegions = as.factor(psychRegions),
psychRegions = fct_recode(psychRegions,
"Friendly" = "Friendly and Conventional",
"Relaxed" = "Relaxed and Creative",
"Temperamental" = "Temperamental and Uninhibited"
)
) %>%
print()
# Create contingency table "ct"
ct <- df %>%
dplyr::select(region, psychRegions) %>%
table() %>%
print()
# Row frequencies
ct %>% rowSums()
# Row percentages
ct %>%
prop.table(1) %>%  # 1 is for row percentages
round(2) %>%       # Round to two decimal places
`*`(100)           # Multiply by 100 to read as percent
# Column frequencies
ct %>% colSums()
source('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/sample/code/02_04_ContingencyTables.R', echo=TRUE)
# Column percentages
ct %>%
prop.table(2) %>%  # 2 is for columns percentages
round(2) %>%
`*`(100)
# Create contingency table "ct"
ct <- df %>%
dplyr::select(region, psychRegions) %>%
table() %>%
print()
# Install pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(magrittr, pacman, rio, tidyverse)
# Save categorical variables and shorten factor labels
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
dplyr::select(state_code, region, psychRegions) %>%
mutate(
psychRegions = as.factor(psychRegions),
psychRegions = fct_recode(psychRegions,
"Friendly" = "Friendly and Conventional",
"Relaxed" = "Relaxed and Creative",
"Temperamental" = "Temperamental and Uninhibited"
)
) %>%
print()
# Create contingency table "ct"
ct <- df %>%
dplyr::select(region, psychRegions) %>%
table() %>%
print()
# Row frequencies
ct %>% rowSums()
# Row percentages
ct %>%
prop.table(1) %>%  # 1 is for row percentages
round(2) %>%       # Round to two decimal places
`*`(100)           # Multiply by 100 to read as percent
# Column frequencies
ct %>% colSums()
# Column percentages
ct %>%
prop.table(2) %>%  # 2 is for columns percentages
round(2) %>%
`*`(100)
# Total percentages
ct %>%
prop.table() %>%  # No argument for total percentages
round(2) %>%
`*`(100)
# Chi-squared test (but n is small)
chi <- ct %>%
chisq.test() %>%
print()
View(chi)
# Additional tables
chi$observed   # Observed frequencies (same as ct)
chi$expected   # Expected frequencies
chi$residuals  # Pearson's residual
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/term-project/final-project")
runApp()
runApp()
runApp()
runApp()
