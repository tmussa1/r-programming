xintercept = 5,
color = "red",
linetype = "dotted"
)                      # Look for "bend" in curve
# Silhouette method
df %>%
fviz_nbclust(
FUN = hcut,
method = "silhouette"  # Look for maximum width
)
# Gap method
# This compares the total intracluster variation for
# values of k with their expected values from null
# distributions (from Monte Carlo simulations)
df %>%
select(-state_code) %>%  # Remove non-numeric variables
clusGap(
FUN = hcut,
nstart = 50,
K.max = 10,
B = 100
) %>%
fviz_gap_stat()          # Look for highest value
# Plot dendrogram (again)
hc %>% plot(               # Generic X-Y plotting
labels = df$state_code,  # Put state names on chart
hang = -1,               # Line up names at bottom
cex = 0.6                # Make font smaller
)
# Plot dendrogram (again)
hc %>% plot(               # Generic X-Y plotting
labels = df$state_code,  # Put state names on chart
hang = -1,               # Line up names at bottom
cex = 0.6                # Make font smaller
)
# Draw give boxes around clusters
hc %>% rect.hclust(  # Add rectangles to clusters
k = 5,             # Draw five rectangles
border = 2:6       # Use colors 2 through 6
)
# Plot dendrogram
hc %>% plot(               # Generic X-Y plotting
labels = df$state_code,  # Put state names on chart
hang = -1,               # Line up names at bottom
cex = 0.6                # Make font smaller
)
# Elbow method
df %>%
fviz_nbclust(          # From factoextra
FUN = hcut,
method = "wss"       # "within cluster sums of squares"
) +
geom_vline(            # Reference line
xintercept = 5,
color = "red",
linetype = "dotted"
)                      # Look for "bend" in curve
# Silhouette method
df %>%
fviz_nbclust(
FUN = hcut,
method = "silhouette"  # Look for maximum width
)
# Gap method
# This compares the total intracluster variation for
# values of k with their expected values from null
# distributions (from Monte Carlo simulations)
df %>%
select(-state_code) %>%  # Remove non-numeric variables
clusGap(
FUN = hcut,
nstart = 50,
K.max = 10,
B = 100
) %>%
fviz_gap_stat()          # Look for highest value
# Plot dendrogram (again)
hc %>% plot(               # Generic X-Y plotting
labels = df$state_code,  # Put state names on chart
hang = -1,               # Line up names at bottom
cex = 0.6                # Make font smaller
)
# Draw give boxes around clusters
hc %>% rect.hclust(  # Add rectangles to clusters
k = 5,             # Draw five rectangles
border = 2:6       # Use colors 2 through 6
)
profileClustering <- profileDf %>%
select(
state_code,
instagram:modernDance
) %>%  dist %>%
hclust  %>% rect.hclust(
k = 5,
border = 2:6
)
profileDf <- import("data/StateData.xlsx") %>%
as_tibble()
profileClustering <- profileDf %>%
select(
state_code,
instagram:modernDance
) %>%  dist %>%
hclust  %>% rect.hclust(
k = 5,
border = 2:6
)
profileClustering
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(
state_code,
instagram:modernDance
) %>%
print()
# Calculate clusters
hc <- df %>%  # Get data
dist %>%    # Compute distance/dissimilarity matrix
hclust      # Compute hierarchical clusters
# Plot dendrogram
hc %>% plot(               # Generic X-Y plotting
labels = df$state_code,  # Put state names on chart
hang = -1,               # Line up names at bottom
cex = 0.6                # Make font smaller
)
# Elbow method
df %>%
fviz_nbclust(          # From factoextra
FUN = hcut,
method = "wss"       # "within cluster sums of squares"
) +
geom_vline(            # Reference line
xintercept = 5,
color = "red",
linetype = "dotted"
)                      # Look for "bend" in curve
# Silhouette method
df %>%
fviz_nbclust(
FUN = hcut,
method = "silhouette"  # Look for maximum width
)
# Gap method
# This compares the total intracluster variation for
# values of k with their expected values from null
# distributions (from Monte Carlo simulations)
df %>%
select(-state_code) %>%  # Remove non-numeric variables
clusGap(
FUN = hcut,
nstart = 50,
K.max = 10,
B = 100
) %>%
fviz_gap_stat()          # Look for highest value
# Plot dendrogram (again)
hc %>% plot(               # Generic X-Y plotting
labels = df$state_code,  # Put state names on chart
hang = -1,               # Line up names at bottom
cex = 0.6                # Make font smaller
)
# Draw give boxes around clusters
hc %>% rect.hclust(  # Add rectangles to clusters
k = 5,             # Draw five rectangles
border = 2:6       # Use colors 2 through 6
)
profileClustering <- profileDf %>%
select(
state_code,
instagram:modernDance
) %>%  dist %>%
hclust %>% plot(
labels = df$state_code,
hang = -1,
cex = 0.6
) %>%
rect.hclust(
k = 5,
border = 2:6
)
profileClustering
# Plot dendrogram (again)
hc %>% plot(               # Generic X-Y plotting
labels = df$state_code,  # Put state names on chart
hang = -1,               # Line up names at bottom
cex = 0.6                # Make font smaller
)
# Draw give boxes around clusters
hc %>% rect.hclust(  # Add rectangles to clusters
k = 5,             # Draw five rectangles
border = 2:6       # Use colors 2 through 6
)
profileClustering <- profileDf %>%
select(
state_code,
instagram:modernDance
) %>%  dist %>%
hclust %>T% plot(
labels = df$state_code,
hang = -1,
cex = 0.6
) %>%
rect.hclust(
k = 5,
border = 2:6
)
profileClustering
profileClustering <- profileDf %>%
select(
state_code,
instagram:modernDance
) %>%  dist %>%
hclust %>% plot(
labels = df$state_code,
hang = -1,
cex = 0.6
) %>%
rect.hclust(
k = 5,
border = 2:6
)
profileClustering
profileClustering <- profileDf %>%
select(
state_code,
instagram:modernDance
) %>%  dist %>%
hclust %>T% plot(
labels = df$state_code,
hang = -1,
cex = 0.6
) %>%
rect.hclust(
k = 5,
border = 2:6
)
profileClustering
profileClustering <- profileDf %>%
select(
state_code,
instagram:modernDance
) %>%  dist %>%
hclust %>% plot(
labels = df$state_code,
hang = -1,
cex = 0.6
) %>%
rect.hclust(
k = 5,
border = 2:6
)
profileClustering
profileClustering <- profileDf %>%
select(
state_code,
instagram:modernDance
) %>%  dist %>%
hclust %>% plot(
labels = df$state_code,
hang = -1,
cex = 0.6
)
profileClustering <- profileClustering %>%
rect.hclust(
k = 5,
border = 2:6
)
profileClustering
# Draw give boxes around clusters
hc %>% rect.hclust(  # Add rectangles to clusters
k = 5,             # Draw five rectangles
border = 2:6       # Use colors 2 through 6
)
# Plot dendrogram (again)
hc %>% plot(               # Generic X-Y plotting
labels = df$state_code,  # Put state names on chart
hang = -1,               # Line up names at bottom
cex = 0.6                # Make font smaller
)
# Plot dendrogram (again)
hc %>% plot(               # Generic X-Y plotting
labels = df$state_code,  # Put state names on chart
hang = -1,               # Line up names at bottom
cex = 0.6                # Make font smaller
)
# Draw give boxes around clusters
hc %>% rect.hclust(  # Add rectangles to clusters
k = 5,             # Draw five rectangles
border = 2:6       # Use colors 2 through 6
)
profileClustering <- profileDf %>%
select(
state_code,
instagram:modernDance
)
hc <- profileClustering %>%  dist %>%
hclust
hc %>% plot(
labels = df$state_code,
hang = -1,
cex = 0.6
)
hc %>%
rect.hclust(
k = 5,
border = 2:6
)
profileClustering <- profileDf %>%
select(
state_code,
instagram:modernDance
)
hc <- profileClustering %>%  dist %>%
hclust
profileClustering <- hc %>% plot(
labels = df$state_code,
hang = -1,
cex = 0.6
)
profileClustering %>%
rect.hclust(
k = 5,
border = 2:6
)
profileClustering
profileClustering <- profileDf %>%
select(
state_code,
instagram:modernDance
)
hc <- profileClustering %>%  dist %>%
hclust
profileClustering <- hc %>% plot(
labels = df$state_code,
hang = -1,
cex = 0.6
)
hc %>%
rect.hclust(
k = 5,
border = 2:6
)
runApp()
runApp()
profileClustering <- profileDf %>%
select(
state_code,
instagram:modernDance
)
hc <- profileClustering %>%  dist %>%
hclust
profileClustering <- hc %>% plot(
labels = df$state_code,
hang = -1,
cex = 0.6
)
runApp()
pacman::p_load(corrplot, magrittr, pacman,
psych, rio, tidyverse, GGally,
cluster, factoextra)
runApp()
profileClustering <- profileDf %>%
select(
state_code,
instagram:modernDance
)
profileClustering <- profileClustering %>% dist %>%
hclust
profileClustering <- profileClustering %>% plot(
labels = df$state_code,
hang = -1,
cex = 0.6
)
hc %>%
rect.hclust(
k = 5,
border = 2:6
)
runApp()
runApp()
runApp()
profileClustering <- profileDf %>%
select(
state_code,
instagram:modernDance
)
profileClustering <- profileClustering %>% dist %>%
hclust
profileClustering <- profileClustering %>% plot(
labels = profileClustering$state_code,
hang = -1,
cex = 0.6
)
profileClustering <- profileDf %>%
select(
state_code,
instagram:modernDance
)
profileClustering <- profileClustering %>% dist %>%
hclust
profileClustering <- profileClustering %>% plot(
labels = profileClustering$state_code,
hang = -1,
cex = 0.6
)
runApp()
runApp()
runApp()
ggplot(
profileClustering,
labels = profileClustering$state_code,
hang = -1,
cex = 0.6
)
profileDf <- import("data/StateData.xlsx") %>%
as_tibble()
profileClustering <- profileDf %>%
dplyr::select(
state_code,
instagram:modernDance
)
profileClustering <- profileClustering %>% dist %>%
hclust
ggplot(
profileClustering,
labels = profileClustering$state_code,
hang = -1,
cex = 0.6
)
profileClustering <- profileDf %>%
dplyr::select(
state_code,
instagram:modernDance
)
profileClustering <- profileClustering %>% dist %>%
hclust
ggplot(
profileClustering,
labels = profileClustering$state_code,
hang = -1,
cex = 0.6
)
runApp()
runApp()
shiny::runApp()
runApp()
# Install pacman ("package manager") if needed
if (!require("pacman")) install.packages("pacman")
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(cluster, factoextra, magrittr, pacman, rio,
tidyverse)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(
state_code,
instagram:modernDance
) %>%
print()
# Calculate clusters
hc <- df %>%  # Get data
dist %>%    # Compute distance/dissimilarity matrix
hclust      # Compute hierarchical clusters
# Plot dendrogram
hc %>% plot(               # Generic X-Y plotting
labels = df$state_code,  # Put state names on chart
hang = -1,               # Line up names at bottom
cex = 0.6                # Make font smaller
)
# Elbow method
df %>%
fviz_nbclust(          # From factoextra
FUN = hcut,
method = "wss"       # "within cluster sums of squares"
) +
geom_vline(            # Reference line
xintercept = 5,
color = "red",
linetype = "dotted"
)                      # Look for "bend" in curve
# Silhouette method
df %>%
fviz_nbclust(
FUN = hcut,
method = "silhouette"  # Look for maximum width
)
# Gap method
# This compares the total intracluster variation for
# values of k with their expected values from null
# distributions (from Monte Carlo simulations)
df %>%
select(-state_code) %>%  # Remove non-numeric variables
clusGap(
FUN = hcut,
nstart = 50,
K.max = 10,
B = 100
) %>%
fviz_gap_stat()          # Look for highest value
# Plot dendrogram (again)
hc %>% plot(               # Generic X-Y plotting
labels = df$state_code,  # Put state names on chart
hang = -1,               # Line up names at bottom
cex = 0.6                # Make font smaller
)
# Draw give boxes around clusters
hc %>% rect.hclust(  # Add rectangles to clusters
k = 5,             # Draw five rectangles
border = 2:6       # Use colors 2 through 6
)
runApp()
runApp()
