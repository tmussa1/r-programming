findConformalMatrices <- function(){
iden <- matrix(c(1,0, 0, 1), nrow=2, ncol = 2)
generator <- matrix(c(1,1, 2, 1), nrow=2, ncol = 2)
result <<- c()
while(!all(generator == iden)){
print(result)
result <<- cbind(result , (generator %*% generator) %% 5)
}
return (generator)
}
g <- findConformalMatrices()
findConformalMatrices <- function(){
iden <- matrix(c(1,0, 0, 1), nrow=2, ncol = 2)
generator <- matrix(c(1,1, 2, 1), nrow=2, ncol = 2)
result <<- c()
while(!all(generator == iden)){
print(result)
result <<- cbind(result , (generator %*% generator) %% 5)
}
return (result)
}
g <- findConformalMatrices()
findConformalMatrices <- function(){
iden <- matrix(c(1,0, 0, 1), nrow=2, ncol = 2)
generator <- matrix(c(1,1, 2, 1), nrow=2, ncol = 2)
result <<- c()
while(!all(generator == iden)){
print(result)
generator <- (generator %*% generator) %% 5
result <<- cbind(result , generator)
}
return (result)
}
g <- findConformalMatrices()
findConformalMatrices <- function(){
iden <- matrix(c(1,0, 0, 1), nrow=2, ncol = 2)
generator <- matrix(c(1,1, 2, 1), nrow=2, ncol = 2)
result <<- c()
while(true){
print(result)
if(all(generator == iden)){
break;
}
generator <- (generator %*% generator) %% 5
result <<- cbind(result , generator)
}
return (result)
}
g <- findConformalMatrices()
findConformalMatrices <- function(){
iden <- matrix(c(1,0, 0, 1), nrow=2, ncol = 2)
generator <- matrix(c(1,1, 2, 1), nrow=2, ncol = 2)
result <<- c()
while(TRUE){
print(result)
if(all(generator == iden)){
break;
}
generator <- (generator %*% generator) %% 5
result <<- cbind(result , generator)
}
return (result)
}
g <- findConformalMatrices()
findConformalMatrices <- function(){
iden <- matrix(c(1,0, 0, 1), nrow=2, ncol = 2)
generator <- matrix(c(1,1, 2, 1), nrow=2, ncol = 2)
result <<- c()
for(val in (1: 9)){
generator <- (generator %*% generator) %% 5
result <<- cbind(result , generator)
}
return (result)
}
g <- findConformalMatrices()
setwd("C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/assignment-08")
findConformalMatrices <- function(){
iden <- matrix(c(1,0, 0, 1), nrow=2, ncol = 2)
generator <- matrix(c(1,1, 2, 1), nrow=2, ncol = 2)
result <<- c()
for(val in (1: 9)){
generator <- (generator %*% generator) %% 5
result <<- cbind(result , generator)
}
return (result)
}
g <- findConformalMatrices()
g
findConformalMatrices <- function(){
iden <- matrix(c(1,0, 0, 1), nrow=2, ncol = 2)
generator <- matrix(c(1,1, 2, 1), nrow=2, ncol = 2)
result <<- c()
for(val in (1: 10)){
generator <- (generator %*% generator) %% 5
result <<- cbind(result , generator)
}
return (result)
}
g <- findConformalMatrices()
g
findConformalMatrices <- function(){
iden <- matrix(c(1,0, 0, 1), nrow=2, ncol = 2)
generator <- matrix(c(1,1, 2, 1), nrow=2, ncol = 2)
result <<- c()
for(val in (1: 10)){
generator <- (generator %*% generator) %% 3
result <<- cbind(result , generator)
}
return (result)
}
g <- findConformalMatrices()
g
findConformalMatrices <- function(){
iden <- matrix(c(1,0, 0, 1), nrow=2, ncol = 2)
generator <- matrix(c(1,1, 2, 1), nrow=2, ncol = 2)
result <<- c()
prev <- generator
for(val in (1: 10)){
prev <- (generator %*% prev) %% 3
result <<- cbind(result , generator)
}
return (result)
}
g <- findConformalMatrices()
g
findConformalMatrices <- function(){
iden <- matrix(c(1,0, 0, 1), nrow=2, ncol = 2)
generator <- matrix(c(1,1, 2, 1), nrow=2, ncol = 2)
result <<- c()
prev <- generator
for(val in (1: 10)){
prev <- (generator %*% prev) %% 3
result <<- cbind(result , prev)
}
return (result)
}
g <- findConformalMatrices()
g
findConformalMatrices <- function(){
iden <- matrix(c(1,0, 0, 1), nrow=2, ncol = 2)
generator <- matrix(c(1,1, 2, 1), nrow=2, ncol = 2)
result <<- c()
prev <- generator
for(val in (1: 10)){
result <<- cbind(result , prev)
prev <- (generator %*% prev) %% 3
}
return (result)
}
g <- findConformalMatrices()
g
item1 <- findConformalMatrices()[, 1 : 2]
item1
shiny::runApp()
item8
item8 <- findConformalMatrices()[, 15 : 16]
item8
runApp('C:/Users/tmuss/Desktop/MS in CS/MATH E-151/r-programming/assignment-03/part2')
#Converts a matrix to TeX
tex.matrix <- function(m){
M <- nrow(m)
str <- "\\begin{bmatrix}"
str <- paste(str,tex.row(m[1,]),sep = "",collapse= "")
if (M == 1)
return(paste(str,"\\end{bmatrix}"))
for (i in 2:M) {
str <- paste(str,tex.row(m[i,]),sep = "\\\\",collapse= "\\\\")
}
return(paste(str,"\\end{bmatrix}"))
}
tex.matrix(rbind(c(1,2),c(3,4)))
runApp()
runApp()
runApp()
runApp()
runApp()
item1 <- matrix(findConformalMatrices()[, 1 : 2], nrow = 2, ncol = 2)
item1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
